/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ru.ncedu.java.tasks;

import java.util.Set;
import java.io.PrintStream;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

import java.util.TreeSet;


/**
 *
 * @author Лёха
 */
public class WordCounterImpl implements WordCounter {

    public static void main(String[] args) {
      
        WordCounterImpl fuck = new WordCounterImpl();
        fuck.setText("Пидор Павел Анакентий Пабелка");

    fuck.getWordCounts();

        fuck.printWordCountsSorted(System.out);
    fuck.printWordCounts(System.out);
        fuck.getWordCountsSorted();
    }
    String tekst;
    HashMap<String, Long> map = new HashMap<>();
    List list = new ArrayList();
    Long k;
    NewClass g = new NewClass();
    //   Map<String, Long> sortedMap;

    TreeMap<String, Long> sortedMap = new TreeMap<>();

    @Override
    public void setText(String text) {
        tekst = text;
    }

    @Override
    public String getText() {
        if (tekst != null) {
            return tekst;
        } else {

            return null;
        }
    }

    @Override
    public Map<String, Long> getWordCounts() throws IllegalStateException {
        if (tekst == null) {
            throw new IllegalStateException();
        } else {
            String[] split = tekst.toLowerCase().split("\\s");
            Set<String> set = new TreeSet();
            set.addAll(Arrays.asList(split));
            set.remove("<blandit>");
            set.remove("<diam>");
            set.remove("<suscipit>");
            set.remove("");
            String[] uniquewords = set.toArray(new String[0]);
            for (int i = 0; i < set.size(); i++) {
                k = 0L;
                for (String split1 : split) {
                    if (uniquewords[i].equalsIgnoreCase(split1)) {
                        k = k + 1;
                    }
                }
                map.put(uniquewords[i], k);
            }
            sortedMap = g.sortir(map);
            return (sortedMap);
        }
    }

    @Override
    public List<Map.Entry<String, Long>> getWordCountsSorted() throws IllegalStateException {
        if (tekst == null) {
            throw new IllegalStateException();
        } else {

for (Map.Entry<String, Long> entry : sortedMap.entrySet()) {
            list.add(entry);
        }
            return list;
        }
    }

    @Override
    public List<Map.Entry<String, Long>> sortWordCounts(Map<String, Long> orig) {
        return null;
    }

    @Override
    public void printWordCounts(PrintStream ps) {
       // ps.println(" Prost");
//        List<String> list1 = new ArrayList();
//        for (String a : map.keySet()) {
//            list1.add(a);
//        }
//
//        for (String o : list1) {
//            ps.println(o + " " + map.get(o));
//        }
//        
        for (Map.Entry<String, Long> entry : map.entrySet()) {
            System.out.println(entry.getKey() + " " + entry.getValue());
        }
    }

    @Override
    public void printWordCountsSorted(PrintStream ps) {
       // ps.println(" Sort");
//        List<String> list1 = new ArrayList();
//        for (String a : map.keySet()) {
//            list1.add(a);
//        }
//
//        for (String o : list1) {
//            ps.println(o + " " + map.get(o));
//        }   
        for (Map.Entry<String, Long> entry : sortedMap.entrySet()) {
            System.out.println(entry.getKey() + " " + entry.getValue());
        }
    }

    public class NewClass {

        public TreeMap sortir(Map<String, Long> map) {

            TreeMap<String, Long> sortedMap = SortByValue(map);
            System.out.println(sortedMap);
            return sortedMap;

        }

        public TreeMap<String, Long> SortByValue(Map<String, Long> map) {
            ValueComparator vc = new ValueComparator(map);
            TreeMap<String, Long> sortedMap = new TreeMap<>(vc);
            sortedMap.putAll(map);
            return sortedMap;
        }
    }

    class ValueComparator implements Comparator<String> {

        Map<String, Long> map;

        public ValueComparator(Map<String, Long> base) {
            this.map = base;
        }

        @Override
        public int compare(String a, String b) {
            //return (map.get(a) >= map.get(b)) ? -1 : 1;
            if (map.get(a) > map.get(b)) {
                return -1;
            } else if (map.get(a) < map.get(b)) {
                return 1;
            }
            else return a.compareTo(b);
        }
    }

}
